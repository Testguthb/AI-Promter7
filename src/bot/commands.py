import logging
from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from .states import ProcessingStates

logger = logging.getLogger(__name__)

# Command handlers router
commands_router = Router()

# User sessions storage
user_sessions = {}


@commands_router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    """Handle /start command."""
    user_id = message.from_user.id
    user_sessions[user_id] = {
        "current_text": None,
        "outline": None,
        "custom_prompt": "",
        "sonnet_prompt": "",
        "target_volume": None,
        "multithread_mode": False,
        "attempt_count": 0,  # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± (–≤–∫–ª—é—á–∞—é—á–∏ exceptions)
        "successful_attempts": 0,  # –¢—ñ–ª—å–∫–∏ —É—Å–ø—ñ—à–Ω—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó (–≤–∞–ª—ñ–¥–Ω—ñ + –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ)
        "valid_responses": 0,
        "invalid_responses": 0,
        "progress_message": None,
        "valid_files": [],
        "invalid_files": [],
        "prompt_context": "initial"
    }
    
    welcome_text = """
ü§ñ **AI Workflow Automation System v2.0**

üöÄ **–ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:**
‚Ä¢ **–ß–µ—Ä–≥–∞ –ø—Ä–æ–µ–∫—Ç—ñ–≤** - –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –¥–µ–∫—ñ–ª—å–∫–∞ –æ–±—Ä–æ–±–æ–∫ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
‚Ä¢ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç–∞–º–∏** Claude Sonnet 4
‚Ä¢ **–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è** - –æ—Ç—Ä–∏–º—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
‚Ä¢ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –≤—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –≤—Å—ñ —Å–≤–æ—ó –ø—Ä–æ–µ–∫—Ç–∏

**–ü–æ–≤–Ω—ñ—Å—Ç—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Ü–µ—Å:**
‚Ä¢ **GPT-4.1** - –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ outline
‚Ä¢ **Claude Sonnet 4** - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥–æ–≤–∂–∏–Ω–∏ (1000 req/min)

**–ü—Ä–æ—Ü–µ—Å:**
1. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª ‚Üí 2. –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ–º—Ç—É (—à–∞–±–ª–æ–Ω –∞–±–æ –≤–ª–∞—Å–Ω–∏–π)
3. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ‚Üí 4. –ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ outline
5. –û–±–µ—Ä—ñ—Ç—å –æ–±—Å—è–≥ ‚Üí 6. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –æ–±—Ä–æ–±–∫—É
7. –î–æ–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ñ –ø—Ä–æ–µ–∫—Ç–∏ –≤ —á–µ—Ä–≥—É ‚Üí 8. –û—Ç—Ä–∏–º—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ

–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: .txt, .docx | –ú–∞–∫—Å. —Ä–æ–∑–º—ñ—Ä: 10 MB
    """
    
    # Create keyboard with story type selection and manual upload option
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìö –ö–æ—Ä–æ—Ç–∫—ñ —ñ—Å—Ç–æ—Ä—ñ—ó", callback_data="select_short_story"),
            InlineKeyboardButton(text="üìñ –î–æ–≤–≥—ñ —ñ—Å—Ç–æ—Ä—ñ—ó", callback_data="select_long_story")
        ],
        [
            InlineKeyboardButton(text="üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π —Ñ–∞–π–ª", callback_data="manual_upload")
        ]
    ])
    
    await message.answer(welcome_text, parse_mode="Markdown")
    await message.answer(
        "**–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:**\n\n"
        "‚Ä¢ **–ö–æ—Ä–æ—Ç–∫—ñ —ñ—Å—Ç–æ—Ä—ñ—ó** - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó –∫–æ—Ä–æ—Ç–∫–∏—Ö —ñ—Å—Ç–æ—Ä—ñ–π\n"
        "‚Ä¢ **–î–æ–≤–≥—ñ —ñ—Å—Ç–æ—Ä—ñ—ó** - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó –¥–æ–≤–≥–∏—Ö —ñ—Å—Ç–æ—Ä—ñ–π\n"
        "‚Ä¢ **–í–ª–∞—Å–Ω–∏–π —Ñ–∞–π–ª** - –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å–≤—ñ–π —Ñ–∞–π–ª (.txt, .docx)",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await state.set_state(ProcessingStates.waiting_for_file)


@commands_router.message(Command("help"))
async def help_command(message: Message):
    """Handle /help command."""
    help_text = """
**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**

/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
/status - –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ç–∞ —á–µ—Ä–≥—É –ø—Ä–æ–µ–∫—Ç—ñ–≤
/queue - –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —á–µ—Ä–≥—É –ø—Ä–æ–µ–∫—Ç—ñ–≤

**üöÄ –ù–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª - –ß–µ—Ä–≥–∞ –ø—Ä–æ–µ–∫—Ç—ñ–≤:**
- **–ú–Ω–æ–∂–∏–Ω–Ω—ñ –æ–±—Ä–æ–±–∫–∏** - –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–æ–µ–∫—Ç—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
- **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —á–µ—Ä–≥–∞** - —Å–∏—Å—Ç–µ–º–∞ –∫–µ—Ä—É—î –ª—ñ–º—ñ—Ç–∞–º–∏ Claude Sonnet 4
- **–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è** - –æ—Ç—Ä–∏–º—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
- **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –≤—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –≤—Å—ñ —Å–≤–æ—ó –ø—Ä–æ–µ–∫—Ç–∏

**–ü—Ä–æ—Ü–µ—Å —Ä–æ–±–æ—Ç–∏:**
1. **–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É** - –Ω–∞–¥—ñ—à–ª—ñ—Ç—å .txt –∞–±–æ .docx —Ñ–∞–π–ª
2. **–í–∏–±—ñ—Ä –ø—Ä–æ–º—Ç—É** - –æ–±–µ—Ä—ñ—Ç—å GPT/Claude —à–∞–±–ª–æ–Ω –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π
3. **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É** - –¥–ª—è GPT –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –≤ —à–∞–±–ª–æ–Ω—ñ
4. **–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è outline** - GPT-4.1 —Å—Ç–≤–æ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω
5. **–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è** - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ outline
6. **–ü—Ä–æ–º—Ç –¥–ª—è Sonnet** - –¥–æ–¥–∞–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è Claude (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
7. **–í–∏–±—ñ—Ä –æ–±—Å—è–≥—É** - –æ–±–µ—Ä—ñ—Ç—å 15K (15-20K), 30K (28-34K), 40K (40-50K) –∞–±–æ 60K (56-68K —Å–∏–º–≤–æ–ª—ñ–≤)
8. **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è** - –æ–¥–∏–Ω –∑–∞–ø–∏—Ç –∑–∞ —Ä–∞–∑ –∑ –ø–æ–≤–Ω–∏–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ª—ñ–º—ñ—Ç—ñ–≤
9. **–ú–Ω–æ–∂–∏–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏** - –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–æ–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ñ –ø—Ä–æ–µ–∫—Ç–∏ –≤ —á–µ—Ä–≥—É
10. **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏** - –æ—Ç—Ä–∏–º—É–π—Ç–µ —Ñ–∞–π–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è

**üéØ –õ—ñ–º—ñ—Ç–∏ Claude Sonnet 4:**
- **1,000 –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É**
- **450,000 –≤—Ö—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É**  
- **90,000 –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É**

**üéØ –®–∞–±–ª–æ–Ω–∏ –ø—Ä–æ–º—Ç—ñ–≤:**
- **GPT —à–∞–±–ª–æ–Ω–∏** - –≥–æ—Ç–æ–≤—ñ –ø—Ä–æ–º—Ç–∏ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∑–∞–º—ñ–Ω–∏ —ñ—Å—Ç–æ—Ä—ñ–π
- **Claude —à–∞–±–ª–æ–Ω–∏** - —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–º—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
- **–í–ª–∞—Å–Ω—ñ –ø—Ä–æ–º—Ç–∏** - –≤–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏

**–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:**
- –§–æ—Ä–º–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤: .txt, .docx
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: 10 MB
- –ë–µ–∑ –æ–±–º–µ–∂–µ–Ω—å –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ñ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —á–µ—Ä–≥–æ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ API –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    """
    
    await message.answer(help_text, parse_mode="Markdown")


@commands_router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    """Handle /cancel command."""
    user_id = message.from_user.id
    
    if user_id in user_sessions:
        session = user_sessions[user_id]
        
        # Send invalid files if any exist before cancelling
        if session.get("invalid_files"):
            from .processors import send_invalid_files
            await send_invalid_files(message, session)
        
        # Send cancellation message with statistics
        await message.answer(
            f"‚ùå **–ì–ï–ù–ï–†–ê–¶–Ü–Ø –°–ö–ê–°–û–í–ê–ù–ê**\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –º–æ–º–µ–Ω—Ç—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:**\n"
            f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±: {session.get('attempt_count', 0)}\n"
            f"‚Ä¢ –£—Å–ø—ñ—à–Ω–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π: {session.get('successful_attempts', 0)}\n"
            f"‚Ä¢ –í–∞–ª—ñ–¥–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {session.get('valid_responses', 0)}\n"
            f"‚Ä¢ –ù–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {session.get('invalid_responses', 0)}\n"
            f"‚Ä¢ –ü–∞—É–∑–∏ –≤ API: {session.get('attempt_count', 0) - session.get('successful_attempts', 0)}\n\n"
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó.",
            parse_mode="Markdown"
        )
        
        # Clean up session
        del user_sessions[user_id]
    else:
        # No active session
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
    
    await state.clear()


@commands_router.message(Command("status"))
async def status_command(message: Message, state: FSMContext):
    """Handle /status command."""
    user_id = message.from_user.id
    current_state = await state.get_state()
    
    if user_id not in user_sessions:
        await message.answer("üìã –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        return
    
    session = user_sessions[user_id]
    
    template_info = session.get('selected_template', {})
    template_name = template_info.get('filename', '–ù–µ –æ–±—Ä–∞–Ω–æ')
    template_ai_type = template_info.get('ai_type', '–ù–µ –æ–±—Ä–∞–Ω–æ')
    
    status_info = f"""
**üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:**

**–°—Ç–∞–Ω:** {current_state or '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è'}
**–§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:** {'‚úÖ' if session.get('current_text') else '‚ùå'}
**Outline –≥–æ—Ç–æ–≤–∏–π:** {'‚úÖ' if session.get('outline') else '‚ùå'}
**–¢–∏–ø –ø—Ä–æ–º—Ç—É:** {template_ai_type.upper() if template_ai_type != '–ù–µ –æ–±—Ä–∞–Ω–æ' else '–í–ª–∞—Å–Ω–∏–π/–ù–µ –æ–±—Ä–∞–Ω–æ'}
**–®–∞–±–ª–æ–Ω:** {template_name[:30]}{'...' if len(template_name) > 30 else ''}
**GPT –ü—Ä–æ–º—Ç:** {session.get('custom_prompt', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')[:50]}...
**Sonnet –ü—Ä–æ–º—Ç:** {session.get('sonnet_prompt', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')[:50]}...
**–¶—ñ–ª—å–æ–≤–∏–π –æ–±—Å—è–≥:** {session.get('target_volume', '–ù–µ –æ–±—Ä–∞–Ω–æ')}
**–ë–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–∏–π —Ä–µ–∂–∏–º:** {'‚ùå (–í—ñ–¥–∫–ª—é—á–µ–Ω–æ)' if session.get('multithread_mode') else '‚úÖ –û–¥–∏–Ω–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç'}
**–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±:** {session.get('attempt_count', 0)}
**–£—Å–ø—ñ—à–Ω–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π:** {session.get('successful_attempts', 0)}
**–í–∞–ª—ñ–¥–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:** {session.get('valid_responses', 0)}
**–ù–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:** {session.get('invalid_responses', 0)}
**–ü–∞—É–∑–∏ –≤ API:** {session.get('attempt_count', 0) - session.get('successful_attempts', 0)}
    """
    
    # Add queue information
    from src.core.project_queue import project_queue
    
    user_projects = await project_queue.get_user_projects(user_id)
    queue_stats = project_queue.get_queue_stats()
    
    if user_projects or queue_stats['total_projects'] > 0 or queue_stats['total_processed'] > 0:
        status_info += f"""

**üìä –ß–µ—Ä–≥–∞ –ø—Ä–æ–µ–∫—Ç—ñ–≤:**
**–í–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏:** {len(user_projects)}
**–ü–æ—Ç–æ—á–Ω–∞ —á–µ—Ä–≥–∞:** –í —á–µ—Ä–∑—ñ: {queue_stats['queued']}, –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è: {queue_stats['processing']}
**–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {queue_stats['completed']}, –ü–æ–º–∏–ª–∫–∏: {queue_stats['failed']}
**–í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ:** {queue_stats['total_processed']} –ø—Ä–æ–µ–∫—Ç—ñ–≤
"""
    
    await message.answer(status_info, parse_mode="Markdown")


@commands_router.message(Command("queue"))
async def queue_command(message: Message):
    """Handle /queue command - show detailed queue information."""
    from src.core.project_queue import project_queue, ProjectStatus
    
    user_id = message.from_user.id
    
    # Get user projects
    user_projects = await project_queue.get_user_projects(user_id)
    queue_stats = project_queue.get_queue_stats()
    
    if not user_projects and queue_stats['total_projects'] == 0:
        await message.answer(
            "üìã **–ß–µ—Ä–≥–∞ –ø—Ä–æ–µ–∫—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫—É –Ω–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏.",
            parse_mode="Markdown"
        )
        return
    
    # Build detailed queue message
    queue_text = "üìä **–î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ß–ï–†–ì–£**\n\n"
    
    # Global stats
    queue_text += f"**üåê –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    queue_text += f"‚Ä¢ –í —á–µ—Ä–∑—ñ: {queue_stats['queued']}\n"
    queue_text += f"‚Ä¢ –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è: {queue_stats['processing']}\n"
    queue_text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {queue_stats['completed']}\n"
    queue_text += f"‚Ä¢ –ü–æ–º–∏–ª–∫–∏: {queue_stats['failed']}\n"
    queue_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤: {queue_stats['total_projects']}\n"
    queue_text += f"‚Ä¢ –í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {queue_stats['total_processed']}\n\n"
    
    if user_projects:
        # Sort projects by creation time
        user_projects.sort(key=lambda x: x.created_at, reverse=True)
        
        queue_text += f"**üë§ –í–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏ ({len(user_projects)}):**\n\n"
        
        for i, project in enumerate(user_projects[:15], 1):  # Show last 15 projects
            status_emoji = {
                ProjectStatus.QUEUED: "‚è≥",
                ProjectStatus.PROCESSING: "üîÑ",
                ProjectStatus.COMPLETED: "‚úÖ",
                ProjectStatus.FAILED: "‚ùå"
            }.get(project.status, "‚ùì")
            
            queue_text += f"{status_emoji} **{i}.** `{project.project_id[-12:]}`\n"
            queue_text += f"   üìÖ {project.created_at.strftime('%d.%m %H:%M:%S')}\n"
            queue_text += f"   üìä {project.target_volume.upper()}\n"
            queue_text += f"   üîÑ –°–ø—Ä–æ–±: {project.attempt_count}"
            
            if project.status == ProjectStatus.PROCESSING:
                queue_text += f" (–æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è...)"
            elif project.status == ProjectStatus.COMPLETED:
                queue_text += f", ‚úÖ –í–∞–ª—ñ–¥–Ω–∏—Ö: {project.valid_responses}"
            elif project.status == ProjectStatus.FAILED:
                queue_text += f", ‚ùå –ü–æ–º–∏–ª–∫–∞"
            
            queue_text += "\n\n"
    
    # Create keyboard with actions
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="view_queue"),
            InlineKeyboardButton(text="üöÄ –ù–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞", callback_data="start_new_processing")
        ]
    ])
    
    await message.answer(queue_text, reply_markup=keyboard, parse_mode="Markdown")