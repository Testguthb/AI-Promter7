import os
import logging
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message, Document, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from .states import ProcessingStates
from .commands import user_sessions
from src.config.settings import MAX_FILE_SIZE, SUPPORTED_FORMATS
from src.utils import FileProcessor
from src.ai_services import AIOrchestrator

logger = logging.getLogger(__name__)

file_handlers_router = Router()

file_processor = FileProcessor()
ai_orchestrator = AIOrchestrator()


@file_handlers_router.message(F.document, StateFilter(ProcessingStates.waiting_for_file))
async def handle_document(message: Message, state: FSMContext):
    """Handle document upload."""
    user_id = message.from_user.id
    document: Document = message.document
    
    if document.file_size > MAX_FILE_SIZE:
        await message.answer(f"‚ùå –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {MAX_FILE_SIZE // (1024*1024)} MB")
        return
    
    file_extension = os.path.splitext(document.file_name)[1].lower()
    if file_extension not in SUPPORTED_FORMATS:
        await message.answer(f"‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É. –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: {', '.join(SUPPORTED_FORMATS)}")
        return
    
    try:
        progress_msg = await message.answer("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ñ–∞–π–ª...")
        
        bot = message.bot
        file = await bot.get_file(document.file_id)
        file_path = f"/tmp/{document.file_name}"
        await bot.download_file(file.file_path, file_path)
        
        await progress_msg.edit_text("üìÑ –í–∏—Ç—è–≥—É—é —Ç–µ–∫—Å—Ç –∑ —Ñ–∞–π–ª—É...")
        text_content = await file_processor.extract_text_from_file(file_path)
        
        os.remove(file_path)
        
        if not text_content.strip():
            await progress_msg.edit_text("‚ùå –§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É.")
            return
        
        user_sessions[user_id]["current_text"] = text_content
        user_sessions[user_id]["filename"] = document.file_name
        
        await progress_msg.edit_text(f"‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ!\nüìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(text_content)} —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–µ–∫—Å—Ç—É.")
        
        from .template_handlers import show_ai_choice
        await show_ai_choice(message, state)
        
    except Exception as e:
        logger.error(f"Error processing document: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: {str(e)}")


@file_handlers_router.message(F.text, StateFilter(ProcessingStates.waiting_for_prompt))
async def handle_custom_prompt(message: Message, state: FSMContext):
    """Handle custom prompt input."""
    user_id = message.from_user.id
    custom_prompt = message.text.strip()
    
    user_sessions[user_id]["custom_prompt"] = custom_prompt
    
    await message.answer(f"‚úÖ –ü—Ä–æ–º—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {custom_prompt[:100]}...")
    await generate_outline(message, state, user_id)


@file_handlers_router.message(F.document, StateFilter(ProcessingStates.waiting_for_prompt))
async def handle_custom_prompt_file(message: Message, state: FSMContext):
    """Handle custom prompt file upload."""
    user_id = message.from_user.id
    document: Document = message.document
    
    if document.file_size > MAX_FILE_SIZE:
        await message.answer(f"‚ùå –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {MAX_FILE_SIZE // (1024*1024)} MB")
        return
    
    file_extension = os.path.splitext(document.file_name)[1].lower()
    if file_extension not in ['.txt', '.docx']:
        await message.answer("‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É. –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: .txt, .docx")
        return
    
    try:
        progress_msg = await message.answer("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ñ–∞–π–ª –∑ –ø—Ä–æ–º—Ç–æ–º...")
        
        bot = message.bot
        file = await bot.get_file(document.file_id)
        file_path = f"/tmp/{document.file_name}"
        await bot.download_file(file.file_path, file_path)
        
        await progress_msg.edit_text("üìÑ –ß–∏—Ç–∞—é –ø—Ä–æ–º—Ç –∑ —Ñ–∞–π–ª—É...")
        prompt_content = await file_processor.extract_text_from_file(file_path)
        
        os.remove(file_path)
        
        if not prompt_content.strip():
            await progress_msg.edit_text("‚ùå –§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É.")
            return
        
        user_sessions[user_id]["custom_prompt"] = prompt_content.strip()
        
        await progress_msg.edit_text(
            f"‚úÖ –ü—Ä–æ–º—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É!\n"
            f"üìä –ü—Ä–æ–º—Ç –º—ñ—Å—Ç–∏—Ç—å {len(prompt_content)} —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
            f"**–ü—Ä–æ–º—Ç:** {prompt_content[:200]}{'...' if len(prompt_content) > 200 else ''}"
        )
        
        await generate_outline(message, state, user_id)
        
    except Exception as e:
        logger.error(f"Error processing prompt file: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É –∑ –ø—Ä–æ–º—Ç–æ–º: {str(e)}")


@file_handlers_router.message(F.text, StateFilter(ProcessingStates.waiting_for_sonnet_prompt))
async def handle_sonnet_prompt(message: Message, state: FSMContext):
    """Handle Sonnet prompt input."""
    user_id = message.from_user.id
    sonnet_prompt = message.text.strip()
    
    user_sessions[user_id]["sonnet_prompt"] = sonnet_prompt
    
    await message.answer(f"‚úÖ –ü—Ä–æ–º—Ç –¥–ª—è Sonnet –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {sonnet_prompt[:100]}...")
    await ask_volume_choice(message, state, user_id)


@file_handlers_router.message(F.document, StateFilter(ProcessingStates.waiting_for_sonnet_prompt))
async def handle_sonnet_prompt_file(message: Message, state: FSMContext):
    """Handle Sonnet prompt file upload."""
    user_id = message.from_user.id
    document: Document = message.document
    
    if document.file_size > MAX_FILE_SIZE:
        await message.answer(f"‚ùå –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {MAX_FILE_SIZE // (1024*1024)} MB")
        return
    
    file_extension = os.path.splitext(document.file_name)[1].lower()
    if file_extension not in ['.txt', '.docx']:
        await message.answer("‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É. –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: .txt, .docx")
        return
    
    try:
        progress_msg = await message.answer("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ñ–∞–π–ª –∑ –ø—Ä–æ–º—Ç–æ–º –¥–ª—è Sonnet...")
        
        bot = message.bot
        file = await bot.get_file(document.file_id)
        file_path = f"/tmp/{document.file_name}"
        await bot.download_file(file.file_path, file_path)
        
        await progress_msg.edit_text("üìÑ –ß–∏—Ç–∞—é –ø—Ä–æ–º—Ç –∑ —Ñ–∞–π–ª—É...")
        prompt_content = await file_processor.extract_text_from_file(file_path)
        
        os.remove(file_path)
        
        if not prompt_content.strip():
            await progress_msg.edit_text("‚ùå –§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É.")
            return
        
        user_sessions[user_id]["sonnet_prompt"] = prompt_content.strip()
        
        await progress_msg.edit_text(
            f"‚úÖ –ü—Ä–æ–º—Ç –¥–ª—è Sonnet —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É!\n"
            f"üìä –ü—Ä–æ–º—Ç –º—ñ—Å—Ç–∏—Ç—å {len(prompt_content)} —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
            f"**–ü—Ä–æ–º—Ç:** {prompt_content[:200]}{'...' if len(prompt_content) > 200 else ''}"
        )
        
        await ask_volume_choice(message, state, user_id)
        
    except Exception as e:
        logger.error(f"Error processing Sonnet prompt file: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É –∑ –ø—Ä–æ–º—Ç–æ–º –¥–ª—è Sonnet: {str(e)}")


async def generate_outline(message: Message, state: FSMContext, user_id: int):
    """Generate outline using GPT-4.1."""
    try:
        session = user_sessions[user_id]
        text = session["current_text"]
        custom_prompt = session["custom_prompt"]
        
        sample_content = ""
        if "selected_template" in session and session["selected_template"]:
            sample_content = session["selected_template"].get("sample_content", "")
        
        progress_msg = await message.answer("üß† –ì–µ–Ω–µ—Ä—É—é outline –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é GPT-4.1...")
        user_sessions[user_id]["progress_message"] = progress_msg
        
        outline = await ai_orchestrator.gpt_service.generate_outline(text, custom_prompt, sample_content)
        session["outline"] = outline
        
        await progress_msg.edit_text("‚úÖ Outline —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!")
        
        outline_filename = f"outline_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        outline_path = await file_processor.save_text_to_file(outline, outline_filename)
        
        outline_file = FSInputFile(outline_path)
        await message.answer_document(
            outline_file,
            caption="üìã **Perfect Outline –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!**\n\n–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ outline —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ, —á–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –≤—ñ–Ω –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –æ–±—Ä–æ–±–∫–∏.",
            parse_mode="Markdown"
        )
        
        os.remove(outline_path)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –ø—ñ–¥—Ö–æ–¥–∏—Ç—å", callback_data="approve_outline"),
                InlineKeyboardButton(text="‚ùå –ù—ñ, –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å", callback_data="reject_outline")
            ],
            [
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data="regenerate_outline")
            ]
        ])
        
        await message.answer(
            "ü§î **–ß–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å —Ü–µ–π outline?**\n\n"
            "‚úÖ **–¢–∞–∫** - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–µ–∑ Claude Sonnet 4\n"
            "‚ùå **–ù—ñ** - –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –Ω–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–æ—á–∞—Ç–∫—É\n"
            "üîÑ **–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏** - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π outline –∑ —Ç–∏–º–∏ —Å–∞–º–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await state.set_state(ProcessingStates.waiting_for_outline_approval)
        
    except Exception as e:
        logger.error(f"Error generating outline: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó outline: {str(e)}")


async def ask_volume_choice(message: Message, state: FSMContext, user_id: int):
    """Ask user to choose target volume."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä 15K —Å–∏–º–≤–æ–ª—ñ–≤", callback_data="volume_15k"),
            InlineKeyboardButton(text="üìä 30K —Å–∏–º–≤–æ–ª—ñ–≤", callback_data="volume_30k")
        ],
        [
            InlineKeyboardButton(text="üìä 40K —Å–∏–º–≤–æ–ª—ñ–≤", callback_data="volume_40k"),
            InlineKeyboardButton(text="üìä 60K —Å–∏–º–≤–æ–ª—ñ–≤", callback_data="volume_60k")
        ]
    ])
    
    await message.answer(
        "üéØ **–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤–∏–π –æ–±—Å—è–≥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:**\n\n"
        "‚Ä¢ **15K** - –¶—ñ–ª—å–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω: 15,000 - 20,000 —Å–∏–º–≤–æ–ª—ñ–≤\n"
        "‚Ä¢ **30K** - –¶—ñ–ª—å–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω: 28,000 - 34,000 —Å–∏–º–≤–æ–ª—ñ–≤\n"
        "‚Ä¢ **40K** - –¶—ñ–ª—å–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω: 40,000 - 50,000 —Å–∏–º–≤–æ–ª—ñ–≤\n"
        "‚Ä¢ **60K** - –¶—ñ–ª—å–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω: 56,000 - 68,000 —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
        "–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–∫–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –≤–∏–±—Ä–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await state.set_state(ProcessingStates.waiting_for_volume_choice)