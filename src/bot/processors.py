import asyncio
import os
import logging
from datetime import datetime
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaDocument
from aiogram.fsm.context import FSMContext

from .states import ProcessingStates
from .commands import user_sessions
from src.ai_services import AIOrchestrator

logger = logging.getLogger(__name__)

ai_orchestrator = AIOrchestrator()




async def start_automated_generation(message: Message, state: FSMContext, user_id: int):
    """Start the automated content generation process."""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    session = user_sessions[user_id]
    volume = session["target_volume"]
    multithread = session["multithread_mode"]
    
    logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –æ–±—Å—è–≥={volume}, –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–∏–π={multithread}")
    
    session["attempt_count"] = 0
    session["successful_attempts"] = 0
    session["valid_responses"] = 0
    session["invalid_responses"] = 0
    
    volume_mapping = {
        "15k": "15K",
        "30k": "30K",
        "40k": "40K", 
        "60k": "60K"
    }
    volume_text = volume_mapping.get(volume, volume.upper())
    mode_text = "–±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–æ–º—É" if multithread else "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É"
    
    await message.answer(
        f"üöÄ **–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó!**\n\n"
        f"üìä –¶—ñ–ª—å–æ–≤–∏–π –æ–±—Å—è–≥: {volume_text} —Å–∏–º–≤–æ–ª—ñ–≤\n"
        f"üîÑ –†–µ–∂–∏–º: {mode_text}\n\n"
        f"‚è≥ –ü–æ—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é...",
        parse_mode="Markdown"
    )
    
    await process_with_automated_claude(message, state, user_id)


async def process_with_automated_claude(message: Message, state: FSMContext, user_id: int):
    """Automated processing with Claude Sonnet 4 with length control and file management."""
    try:
        session = user_sessions[user_id]
        outline = session["outline"]
        sonnet_prompt = session.get("sonnet_prompt", "")
        target_volume = session["target_volume"]
        multithread_mode = session["multithread_mode"]
        
        await state.set_state(ProcessingStates.processing)
        
        if target_volume == "15k":
            min_length, max_length = 15000, 20000
        elif target_volume == "30k":
            min_length, max_length = 28000, 34000
        elif target_volume == "40k":
            min_length, max_length = 40000, 50000
        else:  # 60k
            min_length, max_length = 56000, 68000
        
        progress_msg = await message.answer("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó...")
        
        # Use single request generation (removed multithread/concurrent mode)
        await process_single_request_generation(message, state, user_id, progress_msg, min_length, max_length)
            
    except Exception as e:
        logger.error(f"Error in automated processing: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏: {str(e)}")
        
        if user_id in user_sessions:
            del user_sessions[user_id]
        await state.clear()


async def process_single_request_generation(message: Message, state: FSMContext, user_id: int, 
                                         progress_msg: Message, min_length: int, max_length: int):
    """Single request generation process - one request at a time."""
    session = user_sessions[user_id]
    outline = session["outline"]
    sonnet_prompt = session.get("sonnet_prompt", "")
    
    found_valid = False
    max_attempts = 20  # Maximum attempts to prevent infinite loops
    
    while not found_valid and session["attempt_count"] < max_attempts:
        session["attempt_count"] += 1
        
        try:
            await progress_msg.edit_text(
                f"üîÑ **–°–ø—Ä–æ–±–∞ {session['attempt_count']}/{max_attempts}**\n\n"
                f"üìä –¶—ñ–ª—å–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω: {min_length:,} - {max_length:,} —Å–∏–º–≤–æ–ª—ñ–≤\n"
                f"‚úÖ –í–∞–ª—ñ–¥–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {session['valid_responses']}\n"
                f"‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {session['invalid_responses']}"
            )
            
            result = await ai_orchestrator.claude_service.process_outline(
                outline,
                target_length=(min_length + max_length) // 2,
                sonnet_prompt=sonnet_prompt
            )
            
            found_valid = await save_generation_result(result, session, min_length, max_length, progress_msg)
            
            if not found_valid:
                await asyncio.sleep(1)  # Short delay before next attempt
            
        except Exception as e:
            logger.error(f"Error in generation attempt {session['attempt_count']}: {e}")
            await asyncio.sleep(3)  # Delay on error
            continue
    
    await finalize_generation(message, session, found_valid, max_attempts)





async def save_generation_result(result: str, session: dict, min_length: int, max_length: int, 
                               progress_msg: Message) -> bool:
    """Save generation result and return whether it's valid."""
    char_count = len(result)
    
    is_valid = min_length <= char_count <= max_length
    
    # –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–∏—Ö —Å–ø—Ä–æ–± (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —É—Å–ø—ñ—à–Ω–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π)
    session["successful_attempts"] += 1
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')[:-3]  # Include milliseconds for uniqueness
    
    file_data = {
        "content": result,
        "char_count": char_count,
        "timestamp": timestamp,
        "attempt": session['attempt_count'],
        "successful_attempt": session['successful_attempts'],
        "min_length": min_length,
        "max_length": max_length
    }
    
    if is_valid:
        session["valid_responses"] += 1
        session["valid_files"].append(file_data)
        folder = "–≤–∞–ª—ñ–¥–Ω–∏—Ö"
    else:
        session["invalid_responses"] += 1
        session["invalid_files"].append(file_data)
        folder = "–Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö"
    
    status_emoji = "‚úÖ" if is_valid else "‚ùå"
    status_text = "–í –î–Ü–ê–ü–ê–ó–û–ù–Ü" if is_valid else "–ü–û–ó–ê –î–Ü–ê–ü–ê–ó–û–ù–û–ú"
    
    await progress_msg.edit_text(
        f"{status_emoji} **–°–ø—Ä–æ–±–∞ {session['attempt_count']}: {status_text}**\n\n"
        f"üìä –°–∏–º–≤–æ–ª—ñ–≤: {char_count:,} (—Ü—ñ–ª—å: {min_length:,}-{max_length:,})\n"
        f"üìÅ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–º'—è—Ç—ñ ({folder})\n"
        f"‚úÖ –í–∞–ª—ñ–¥–Ω–∏—Ö: {session['valid_responses']}\n"
        f"‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö: {session['invalid_responses']}\n\n"
        f"{'üéâ –ü–†–û–¶–ï–° –ó–ê–í–ï–†–®–ï–ù–û!' if is_valid else '‚è≥ –ü—Ä–æ–¥–æ–≤–∂—É—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é...'}"
    )
    
    return is_valid





async def send_invalid_files(message: Message, session: dict):
    """Send all invalid files as separate files in one message to Telegram."""
    if not session["invalid_files"]:
        return
    
    temp_files = []
    input_files = []
    
    try:
        for i, file_data in enumerate(session["invalid_files"], 1):
            header = f"""# –ù–ï–í–ê–õ–Ü–î–ù–ê –í–Ü–î–ü–û–í–Ü–î–¨ #{i}
# –¶—ñ–ª—å–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω: {file_data['min_length']:,} - {file_data['max_length']:,}
# –ß–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {datetime.fromtimestamp(int(file_data['timestamp'][:10])).strftime('%Y-%m-%d %H:%M:%S')}

"""
            
            temp_filename = f"invalid_response_{i}_{file_data['timestamp']}.txt"
            temp_path = f"/tmp/{temp_filename}"
            
            with open(temp_path, 'w', encoding='utf-8') as f:
                f.write(header + file_data['content'])
            
            temp_files.append(temp_path)
            input_files.append(FSInputFile(temp_path))
        
        if len(input_files) == 1:
            await message.answer_document(
                input_files[0],
                caption=f"‚ùå **–ù–ï–í–ê–õ–Ü–î–ù–ê –í–Ü–î–ü–û–í–Ü–î–¨**\n\n"
                       f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤: {session['invalid_files'][0]['char_count']:,}\n"
                       f"üìÑ –°–ø—Ä–æ–±–∞ #{session['invalid_files'][0]['attempt']}",
                parse_mode="Markdown"
            )
        else:
            batch_size = 10
            total_files = len(input_files)
            total_batches = (total_files + batch_size - 1) // batch_size  # Ceiling division
            
            for batch_num in range(total_batches):
                start_idx = batch_num * batch_size
                end_idx = min(start_idx + batch_size, total_files)
                batch_files = input_files[start_idx:end_idx]
                
                media_group = []
                for i, input_file in enumerate(batch_files):
                    if batch_num == 0 and i == 0:
                        caption_text = f"‚ùå **–ù–ï–í–ê–õ–Ü–î–ù–Ü –í–Ü–î–ü–û–í–Ü–î–Ü**\n\n"
                        caption_text += f"üìä –í—Å—å–æ–≥–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {len(session['invalid_files'])}\n"
                        if total_batches > 1:
                            caption_text += f"üì¶ –ß–∞—Å—Ç–∏–Ω–∞ {batch_num + 1} –∑ {total_batches}\n"
                        caption_text += f"üìÑ –ö–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ –æ–∫—Ä–µ–º–æ–º—É —Ñ–∞–π–ª—ñ"
                        
                        media_group.append(InputMediaDocument(
                            media=input_file,
                            caption=caption_text,
                            parse_mode="Markdown"
                        ))
                    elif i == 0 and batch_num > 0:
                        media_group.append(InputMediaDocument(
                            media=input_file,
                            caption=f"üì¶ **–ß–∞—Å—Ç–∏–Ω–∞ {batch_num + 1} –∑ {total_batches}**",
                            parse_mode="Markdown"
                        ))
                    else:
                        media_group.append(InputMediaDocument(media=input_file))
                
                await message.answer_media_group(media_group)
                
                if batch_num < total_batches - 1:  # Don't delay after the last batch
                    await asyncio.sleep(1)
    
    finally:
        for temp_path in temp_files:
            try:
                os.remove(temp_path)
            except Exception as e:
                logger.error(f"Error removing temp file {temp_path}: {e}")


async def finalize_generation(message: Message, session: dict, found_valid: bool, max_attempts: int):
    """Finalize the generation process and send results to user."""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    user_id = message.chat.id
    
    if found_valid:
        if session["valid_files"]:
            latest_valid = session["valid_files"][-1]
            char_count = latest_valid["char_count"]
            
            temp_filename = f"final_result_{latest_valid['timestamp']}.txt"
            temp_path = f"/tmp/{temp_filename}"
            
            with open(temp_path, 'w', encoding='utf-8') as f:
                f.write(latest_valid["content"])
            
            final_file = FSInputFile(temp_path)
            await message.answer_document(
                final_file,
                caption=f"üéâ **–ê–í–¢–û–ú–ê–¢–ò–ó–û–í–ê–ù–ê –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê!**\n\n"
                       f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                       f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±: {session['attempt_count']}\n"
                       f"‚Ä¢ –£—Å–ø—ñ—à–Ω–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π: {session['successful_attempts']}\n"
                       f"‚Ä¢ –í–∞–ª—ñ–¥–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {session['valid_responses']}\n"
                       f"‚Ä¢ –ù–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {session['invalid_responses']}\n"
                       f"‚Ä¢ –ü–∞—É–∑–∏ –≤ API: {session['attempt_count'] - session['successful_attempts']}\n"
                       f"‚Ä¢ –§—ñ–Ω–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: {char_count:,} —Å–∏–º–≤–æ–ª—ñ–≤\n\n",
                parse_mode="Markdown"
            )
            
            os.remove(temp_path)
            
            await send_invalid_files(message, session)
        else:
            await message.answer("‚ö†Ô∏è –í–∞–ª—ñ–¥–Ω–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Ö–æ—á–∞ –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è —É—Å–ø—ñ—à–Ω–æ.")
    else:
        await message.answer(
            f"‚ö†Ô∏è **–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º —Å–ø—Ä–æ–± ({max_attempts})**\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±: {session['attempt_count']}\n"
            f"‚Ä¢ –£—Å–ø—ñ—à–Ω–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π: {session['successful_attempts']}\n"
            f"‚Ä¢ –í–∞–ª—ñ–¥–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {session['valid_responses']}\n"
            f"‚Ä¢ –ù–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {session['invalid_responses']}\n"
            f"‚Ä¢ –ü–∞—É–∑–∏ –≤ API: {session['attempt_count'] - session['successful_attempts']}\n\n",
            parse_mode="Markdown"
        )
        
        await send_invalid_files(message, session)
    
    # Add button for new processing after completion
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—É –æ–±—Ä–æ–±–∫—É", callback_data="start_new_processing")
        ],
        [
            InlineKeyboardButton(text="üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–≥—É", callback_data="view_queue")
        ]
    ])
    
    await message.answer(
        "**üîÑ –©–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?**\n\n"
        "‚Ä¢ **–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—É –æ–±—Ä–æ–±–∫—É** - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç –≤ —á–µ—Ä–≥—É\n"
        "‚Ä¢ **–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–≥—É** - –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤\n"
        "‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    # Don't delete session yet - keep it for potential new processing
    # if user_id in user_sessions:
    #     del user_sessions[user_id]