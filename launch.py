#!/usr/bin/env python3
"""
Universal launcher for Telegram Text Processor Bot
Works on Windows, macOS, and Linux
"""

import os
import sys
import platform
import subprocess
import shutil
from pathlib import Path


def print_colored(message, color='white'):
    """Print colored messages based on the platform."""
    colors = {
        'red': '\033[91m' if platform.system() != 'Windows' else '',
        'green': '\033[92m' if platform.system() != 'Windows' else '',
        'yellow': '\033[93m' if platform.system() != 'Windows' else '',
        'blue': '\033[94m' if platform.system() != 'Windows' else '',
        'white': '\033[0m' if platform.system() != 'Windows' else '',
        'reset': '\033[0m' if platform.system() != 'Windows' else ''
    }
    
    if platform.system() == 'Windows':
        # For Windows, we'll just print without colors for simplicity
        print(f"[{color.upper()}] {message}")
    else:
        print(f"{colors.get(color, '')}{message}{colors['reset']}")


def check_python():
    """Check if Python 3.8+ is installed."""
    print_colored("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python...", 'blue')
    
    try:
        version = sys.version_info
        if version.major == 3 and version.minor >= 8:
            print_colored(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} –∑–Ω–∞–π–¥–µ–Ω–æ", 'green')
            return True
        else:
            print_colored(f"‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω Python 3.8+. –ó–Ω–∞–π–¥–µ–Ω–æ: {version.major}.{version.minor}", 'red')
            return False
    except Exception as e:
        print_colored(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Python: {e}", 'red')
        return False


def check_venv():
    """Check if virtual environment exists."""
    venv_path = Path("venv")
    if venv_path.exists():
        print_colored("‚úÖ –í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ –æ—Ç–æ—á–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ", 'green')
        return True
    else:
        print_colored("‚ùå –í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", 'red')
        return False


def check_env_file():
    """Check if .env file exists."""
    env_path = Path(".env")
    if env_path.exists():
        print_colored("‚úÖ .env —Ñ–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ", 'green')
        return True
    else:
        print_colored("‚ùå .env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", 'red')
        return False


def check_requirements():
    """Check if requirements.txt exists."""
    req_path = Path("requirements.txt")
    if req_path.exists():
        print_colored("‚úÖ requirements.txt –∑–Ω–∞–π–¥–µ–Ω–æ", 'green')
        return True
    else:
        print_colored("‚ùå requirements.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", 'red')
        return False


def run_installation():
    """Run the appropriate installation script."""
    system = platform.system()
    
    print_colored(f"üîß –ó–∞–ø—É—Å–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è {system}...", 'yellow')
    
    try:
        if system in ['Linux', 'Darwin']:  # Darwin is macOS
            if Path("install.sh").exists():
                # Make script executable
                os.chmod("install.sh", 0o755)
                result = subprocess.run(['bash', 'install.sh'], check=True)
                return result.returncode == 0
            else:
                print_colored("‚ùå install.sh –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", 'red')
                return False
        elif system == 'Windows':
            if Path("install.bat").exists():
                result = subprocess.run(['install.bat'], shell=True, check=True)
                return result.returncode == 0
            else:
                print_colored("‚ùå install.bat –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", 'red')
                return False
        else:
            print_colored(f"‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {system}", 'red')
            return False
    except subprocess.CalledProcessError as e:
        print_colored(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}", 'red')
        return False
    except Exception as e:
        print_colored(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", 'red')
        return False


def run_bot():
    """Run the bot."""
    system = platform.system()
    
    print_colored("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...", 'blue')
    
    try:
        if system in ['Linux', 'Darwin']:
            # Activate venv and run bot
            if Path("venv/bin/python").exists():
                python_path = "venv/bin/python"
            else:
                python_path = "venv/bin/python3"
            
            result = subprocess.run([python_path, 'main.py'])
            return result.returncode == 0
            
        elif system == 'Windows':
            # Activate venv and run bot
            python_path = "venv\\Scripts\\python.exe"
            if Path(python_path).exists():
                result = subprocess.run([python_path, 'main.py'])
                return result.returncode == 0
            else:
                print_colored("‚ùå Python —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–º—É –æ—Ç–æ—á–µ–Ω–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", 'red')
                return False
        else:
            print_colored(f"‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {system}", 'red')
            return False
            
    except KeyboardInterrupt:
        print_colored("\nüëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º", 'yellow')
        return True
    except Exception as e:
        print_colored(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}", 'red')
        return False


def create_env_from_template():
    """Create .env file from template if it doesn't exist."""
    env_path = Path(".env")
    template_path = Path(".env.template")
    
    if not env_path.exists() and template_path.exists():
        print_colored("üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É –∑ —à–∞–±–ª–æ–Ω—É...", 'blue')
        shutil.copy(template_path, env_path)
        print_colored("‚úÖ .env —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ —à–∞–±–ª–æ–Ω—É", 'green')
        print_colored("‚ö†Ô∏è  –í–ê–ñ–õ–ò–í–û: –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –≤–∞—à—ñ API –∫–ª—é—á—ñ!", 'yellow')
        return True
    return False


def main():
    """Main launcher function."""
    print_colored("ü§ñ Telegram Text Processor Bot Launcher", 'blue')
    print_colored("=" * 50, 'blue')
    print_colored(f"–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {platform.system()}", 'blue')
    print_colored(f"–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}", 'blue')
    print()
    
    # Check Python
    if not check_python():
        print_colored("\n‚ùå –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Python 3.8+ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É", 'red')
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
        sys.exit(1)
    
    # Check if installation is needed
    needs_installation = False
    
    if not check_venv():
        needs_installation = True
    
    if not check_env_file():
        create_env_from_template()
        if not check_env_file():
            needs_installation = True
    
    if not check_requirements():
        print_colored("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", 'red')
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
        sys.exit(1)
    
    # Run installation if needed
    if needs_installation:
        print_colored("\nüîß –ü–æ—Ç—Ä—ñ–±–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...", 'yellow')
        
        if platform.system() == 'Windows':
            response = input("–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è? (y/n): ")
        else:
            response = input("–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è? (y/n): ")
            
        if response.lower() in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
            if not run_installation():
                print_colored("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è", 'red')
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
                sys.exit(1)
        else:
            print_colored("‚ùå –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ", 'yellow')
            sys.exit(0)
    
    # Final checks before running
    print_colored("\nüîç –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...", 'blue')
    
    if not (check_venv() and check_env_file() and Path("main.py").exists()):
        print_colored("‚ùå –ù–µ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –≥–æ—Ç–æ–≤—ñ", 'red')
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
        sys.exit(1)
    
    print_colored("‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ", 'green')
    print_colored("\n" + "=" * 50, 'blue')
    
    # Run the bot
    if not run_bot():
        print_colored("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞", 'red')
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
        sys.exit(1)
    
    print_colored("\nüëã –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞!", 'green')


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print_colored("\nüëã –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º", 'yellow')
    except Exception as e:
        print_colored(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", 'red')
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")
        sys.exit(1)